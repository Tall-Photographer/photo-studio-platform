// File: packages/backend/prisma/schema.prisma
// Supabase-optimized Prisma schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [uuidOssp(map: "uuid-ossp")]
}

// Enums
enum UserRole {
  SUPER_ADMIN
  STUDIO_ADMIN
  MANAGER
  PHOTOGRAPHER
  VIDEOGRAPHER
  ASSISTANT
  EDITOR
  CLIENT
}

enum BookingStatus {
  DRAFT
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum ProjectStatus {
  NOT_STARTED
  IN_PROGRESS
  IN_EDITING
  CLIENT_REVIEW
  DELIVERED
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum InvoiceStatus {
  DRAFT
  SENT
  VIEWED
  PARTIALLY_PAID
  PAID
  OVERDUE
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentGateway {
  STRIPE
  PAYPAL
  SQUARE
  AUTHORIZE_NET
  BRAINTREE
  MANUAL
}

enum Currency {
  USD
  EUR
  GBP
  CAD
  AUD
  JPY
  CNY
  INR
  AED
  SAR
}

enum EquipmentStatus {
  AVAILABLE
  IN_USE
  MAINTENANCE
  REPAIR
  RETIRED
  LOST
}

// Core Models
model Studio {
  id                    String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String
  slug                  String                @unique
  logo                  String?
  primaryColor          String                @default("#000000")
  secondaryColor        String                @default("#ffffff")
  fontFamily            String                @default("Inter")
  
  // Contact & Business Info
  email                 String                @unique
  phone                 String?
  website               String?
  address               String?
  city                  String?
  state                 String?
  country               String?
  postalCode            String?
  timezone              String                @default("UTC")
  businessHours         Json?
  
  // Financial Settings
  defaultCurrency       Currency              @default(USD)
  taxRate               Decimal               @default(0) @db.Decimal(5,4)
  taxId                 String?
  
  // Features & Limits
  maxUsers              Int                   @default(10)
  maxStorageGB          Int                   @default(100)
  features              Json                  @default("{}")
  
  // Subscription
  subscriptionId        String?
  subscriptionStatus    String                @default("trial")
  subscriptionEndDate   DateTime?
  
  // Metadata
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  deletedAt             DateTime?
  
  // Relations
  users                 User[]
  clients               Client[]
  bookings              Booking[]
  equipment             Equipment[]
  rooms                 Room[]
  projects              Project[]
  invoices              Invoice[]
  payments              Payment[]
  expenses              Expense[]
  emailTemplates        EmailTemplate[]
  emailCampaigns        EmailCampaign[]
  notifications         Notification[]
  files                 File[]
  auditLogs             AuditLog[]
  systemSettings        SystemSetting[]
  currencyRates         CurrencyExchangeRate[]
  
  @@index([slug])
  @@index([subscriptionStatus])
  @@map("studios")
}

model User {
  id                    String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  studioId              String                @db.Uuid
  
  // Basic Info
  email                 String                @unique
  password              String
  firstName             String
  lastName              String
  role                  UserRole
  
  // Contact Info
  phone                 String?
  avatar                String?
  
  // Authentication
  emailVerified         Boolean               @default(false)
  emailVerificationToken String?
  passwordResetToken    String?
  passwordResetExpires  DateTime?
  
  // 2FA
  twoFactorEnabled      Boolean               @default(false)
  twoFactorSecret       String?
  
  // OAuth
  googleId              String?
  facebookId            String?
  appleId               String?
  
  // Activity
  lastLoginAt           DateTime?
  lastLoginIp           String?
  loginCount            Int                   @default(0)
  
  // Professional Info
  hourlyRate            Decimal?              @db.Decimal(10,2)
  skills                String[]              @default([])
  specializations       String[]              @default([])
  
  // Metadata
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  deletedAt             DateTime?
  
  // Relations
  studio                Studio                @relation(fields: [studioId], references: [id], onDelete: Cascade)
  sessions              UserSession[]
  bookingAssignments    BookingAssignment[]
  projectAssignments    ProjectAssignment[]
  equipmentCheckouts    EquipmentAssignment[]
  createdBookings       Booking[]             @relation("BookingCreatedBy")
  createdProjects       Project[]             @relation("ProjectCreatedBy")
  createdInvoices       Invoice[]             @relation("InvoiceCreatedBy")
  notifications         Notification[]
  auditLogs             AuditLog[]
  editorProjects        Project[]             @relation("ProjectEditor")
  expenses              Expense[]
  
  @@index([studioId, role])
  @@index([email])
  @@map("users")
}

model UserSession {
  id                    String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                String                @db.Uuid
  token                 String                @unique
  refreshToken          String                @unique
  
  // Device & Location
  userAgent             String?
  ip                    String?
  deviceId              String?
  deviceType            String?
  
  // Expiry
  expiresAt             DateTime
  refreshExpiresAt      DateTime
  
  // Metadata
  createdAt             DateTime              @default(now())
  lastActivityAt        DateTime              @default(now())
  
  // Relations
  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([token])
  @@index([refreshToken])
  @@index([expiresAt])
  @@map("user_sessions")
}

model Client {
  id                    String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  studioId              String                @db.Uuid
  
  // Contact Info
  firstName             String
  lastName              String
  email                 String
  phone                 String?
  company               String?
  
  // Address
  address               String?
  city                  String?
  state                 String?
  country               String?
  postalCode            String?
  
  // Preferences
  preferredContactMethod String               @default("email")
  notes                 String?
  tags                  String[]              @default([])
  
  // Business Info
  totalSpent            Decimal               @default(0) @db.Decimal(10,2)
  totalBookings         Int                   @default(0)
  averageRating         Decimal?              @db.Decimal(3,2)
  loyaltyPoints         Int                   @default(0)
  
  // Marketing
  marketingConsent      Boolean               @default(false)
  emailOptIn            Boolean               @default(true)
  smsOptIn              Boolean               @default(false)
  
  // Metadata
  source                String?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  deletedAt             DateTime?
  
  // Relations
  studio                Studio                @relation(fields: [studioId], references: [id], onDelete: Cascade)
  bookings              Booking[]
  invoices              Invoice[]
  payments              Payment[]
  
  @@index([studioId])
  @@index([email])
  @@map("clients")
}

model Booking {
  id                    String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  studioId              String                @db.Uuid
  clientId              String                @db.Uuid
  createdById           String                @db.Uuid
  
  // Booking Details
  bookingNumber         String                @unique
  title                 String
  description           String?
  status                BookingStatus         @default(PENDING)
  
  // Timing
  startDate             DateTime
  endDate               DateTime
  duration              Int                   // in minutes
  setupTime             Int                   @default(0)
  breakdownTime         Int                   @default(0)
  
  // Location
  location              String?
  address               String?
  
  // Pricing
  basePrice             Decimal               @db.Decimal(10,2)
  currency              Currency              @default(USD)
  taxAmount             Decimal               @default(0) @db.Decimal(10,2)
  discountAmount        Decimal               @default(0) @db.Decimal(10,2)
  totalAmount           Decimal               @db.Decimal(10,2)
  
  // Requirements
  equipmentNeeded       String[]              @default([])
  specialRequirements   String?
  
  // Metadata
  notes                 String?
  internalNotes         String?
  tags                  String[]              @default([])
  isRecurring           Boolean               @default(false)
  recurringPattern      Json?
  
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  deletedAt             DateTime?
  
  // Relations
  studio                Studio                @relation(fields: [studioId], references: [id], onDelete: Cascade)
  client                Client                @relation(fields: [clientId], references: [id], onDelete: Cascade)
  createdBy             User                  @relation("BookingCreatedBy", fields: [createdById], references: [id])
  assignments           BookingAssignment[]
  roomAssignments       RoomAssignment[]
  equipmentAssignments  EquipmentAssignment[]
  projects              Project[]
  invoices              Invoice[]
  payments              Payment[]
  
  @@index([studioId, status])
  @@index([clientId])
  @@index([startDate])
  @@index([bookingNumber])
  @@map("bookings")
}

model BookingAssignment {
  id                    String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bookingId             String                @db.Uuid
  userId                String                @db.Uuid
  
  // Assignment Details
  role                  String
  rate                  Decimal?              @db.Decimal(10,2)
  currency              Currency              @default(USD)
  hours                 Decimal?              @db.Decimal(5,2)
  
  // Status
  isConfirmed           Boolean               @default(false)
  confirmedAt           DateTime?
  
  // Metadata
  notes                 String?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  
  // Relations
  booking               Booking               @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([bookingId, userId])
  @@index([bookingId])
  @@index([userId])
  @@map("booking_assignments")
}

model Equipment {
  id                    String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  studioId              String                @db.Uuid
  
  // Equipment Details
  name                  String
  description           String?
  category              String
  brand                 String?
  model                 String?
  serialNumber          String?
  
  // Tracking
  qrCode                String?               @unique
  location              String?
  status                EquipmentStatus       @default(AVAILABLE)
  
  // Financial
  purchasePrice         Decimal?              @db.Decimal(10,2)
  currency              Currency              @default(USD)
  purchaseDate          DateTime?
  warrantyExpires       DateTime?
  
  // Maintenance
  lastMaintenanceDate   DateTime?
  nextMaintenanceDate   DateTime?
  maintenanceNotes      String?
  
  // Usage
  totalUsageHours       Int                   @default(0)
  
  // Metadata
  notes                 String?
  tags                  String[]              @default([])
  images                String[]              @default([])
  
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  deletedAt             DateTime?
  
  // Relations
  studio                Studio                @relation(fields: [studioId], references: [id], onDelete: Cascade)
  assignments           EquipmentAssignment[]
  
  @@index([studioId, category])
  @@index([status])
  @@index([qrCode])
  @@map("equipment")
}

model EquipmentAssignment {
  id                    String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  equipmentId           String                @db.Uuid
  userId                String                @db.Uuid
  bookingId             String?               @db.Uuid
  
  // Assignment Details
  checkedOutAt          DateTime              @default(now())
  checkedInAt           DateTime?
  expectedReturnDate    DateTime?
  
  // Condition
  conditionOut          String?
  conditionIn           String?
  notes                 String?
  
  // Metadata
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  
  // Relations
  equipment             Equipment             @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  booking               Booking?              @relation(fields: [bookingId], references: [id], onDelete: SetNull)
  
  @@index([equipmentId])
  @@index([userId])
  @@index([bookingId])
  @@map("equipment_assignments")
}

model Room {
  id                    String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  studioId              String                @db.Uuid
  
  // Room Details
  name                  String
  description           String?
  type                  String
  
  // Specifications
  dimensions            String?
  capacity              Int?
  features              String[]              @default([])
  
  // Pricing
  hourlyRate            Decimal?              @db.Decimal(10,2)
  currency              Currency              @default(USD)
  
  // Availability
  isAvailable           Boolean               @default(true)
  
  // Metadata
  notes                 String?
  images                String[]              @default([])
  
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  deletedAt             DateTime?
  
  // Relations
  studio                Studio                @relation(fields: [studioId], references: [id], onDelete: Cascade)
  assignments           RoomAssignment[]
  
  @@index([studioId])
  @@map("rooms")
}

model RoomAssignment {
  id                    String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  roomId                String                @db.Uuid
  bookingId             String                @db.Uuid
  
  // Assignment Details
  startTime             DateTime
  endTime               DateTime
  
  // Metadata
  notes                 String?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  
  // Relations
  room                  Room                  @relation(fields: [roomId], references: [id], onDelete: Cascade)
  booking               Booking               @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  
  @@index([roomId])
  @@index([bookingId])
  @@map("room_assignments")
}

model Project {
  id                    String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  studioId              String                @db.Uuid
  bookingId             String?               @db.Uuid
  createdById           String                @db.Uuid
  editorId              String?               @db.Uuid
  
  // Project Details
  projectNumber         String                @unique
  title                 String
  description           String?
  status                ProjectStatus         @default(NOT_STARTED)
  
  // Deliverables
  deliveryDate          DateTime?
  deliveryMethod        String?
  
  // File Management
  totalFiles            Int                   @default(0)
  processedFiles        Int                   @default(0)
  approvedFiles         Int                   @default(0)
  
  // Progress Tracking
  progressPercentage    Int                   @default(0)
  
  // Client Communication
  clientApprovalRequired Boolean              @default(false)
  clientApprovedAt      DateTime?
  clientFeedback        String?
  
  // Metadata
  notes                 String?
  internalNotes         String?
  tags                  String[]              @default([])
  
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  deletedAt             DateTime?
  
  // Relations
  studio                Studio                @relation(fields: [studioId], references: [id], onDelete: Cascade)
  booking               Booking?              @relation(fields: [bookingId], references: [id], onDelete: SetNull)
  createdBy             User                  @relation("ProjectCreatedBy", fields: [createdById], references: [id])
  editor                User?                 @relation("ProjectEditor", fields: [editorId], references: [id])
  assignments           ProjectAssignment[]
  files                 File[]
  
  @@index([studioId, status])
  @@index([bookingId])
  @@index([projectNumber])
  @@map("projects")
}

model ProjectAssignment {
  id                    String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId             String                @db.Uuid
  userId                String                @db.Uuid
  
  // Assignment Details
  role                  String
  assignedAt            DateTime              @default(now())
  
  // Status
  isCompleted           Boolean               @default(false)
  completedAt           DateTime?
  
  // Metadata
  notes                 String?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  
  // Relations
  project               Project               @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
  @@map("project_assignments")
}

model Invoice {
  id                    String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  studioId              String                @db.Uuid
  clientId              String                @db.Uuid
  bookingId             String?               @db.Uuid
  createdById           String                @db.Uuid
  
  // Invoice Details
  invoiceNumber         String                @unique
  title                 String?
  description           String?
  status                InvoiceStatus         @default(DRAFT)
  
  // Dates
  issueDate             DateTime              @default(now())
  dueDate               DateTime
  paidDate              DateTime?
  
  // Financial
  subtotal              Decimal               @db.Decimal(10,2)
  taxAmount             Decimal               @default(0) @db.Decimal(10,2)
  discountAmount        Decimal               @default(0) @db.Decimal(10,2)
  totalAmount           Decimal               @db.Decimal(10,2)
  paidAmount            Decimal               @default(0) @db.Decimal(10,2)
  balanceAmount         Decimal               @db.Decimal(10,2)
  currency              Currency              @default(USD)
  
  // Payment Terms
  paymentTerms          String?
  
  // Metadata
  notes                 String?
  internalNotes         String?
  
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  deletedAt             DateTime?
  
  // Relations
  studio                Studio                @relation(fields: [studioId], references: [id], onDelete: Cascade)
  client                Client                @relation(fields: [clientId], references: [id], onDelete: Cascade)
  booking               Booking?              @relation(fields: [bookingId], references: [id], onDelete: SetNull)
  createdBy             User                  @relation("InvoiceCreatedBy", fields: [createdById], references: [id])
  lineItems             InvoiceLineItem[]
  payments              Payment[]
  
  @@index([studioId, status])
  @@index([clientId])
  @@index([invoiceNumber])
  @@map("invoices")
}

model InvoiceLineItem {
  id                    String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invoiceId             String                @db.Uuid
  
  // Line Item Details
  description           String
  quantity              Decimal               @db.Decimal(10,2)
  unitPrice             Decimal               @db.Decimal(10,2)
  totalPrice            Decimal               @db.Decimal(10,2)
  
  // Metadata
  sortOrder             Int                   @default(0)
  
  // Relations
  invoice               Invoice               @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  
  @@index([invoiceId])
  @@map("invoice_line_items")
}

model Payment {
  id                    String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  studioId              String                @db.Uuid
  clientId              String                @db.Uuid
  invoiceId             String?               @db.Uuid
  bookingId             String?               @db.Uuid
  
  // Payment Details
  paymentNumber         String                @unique
  amount                Decimal               @db.Decimal(10,2)
  currency              Currency              @default(USD)
  status                PaymentStatus         @default(PENDING)
  gateway               PaymentGateway        @default(MANUAL)
  
  // Gateway Details
  gatewayTransactionId  String?
  gatewayResponse       Json?
  
  // Payment Method
  paymentMethod         String?
  
  // Dates
  paymentDate           DateTime              @default(now())
  processedAt           DateTime?
  
  // Metadata
  description           String?
  metadata              Json?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  
  // Relations
  studio                Studio                @relation(fields: [studioId], references: [id], onDelete: Cascade)
  client                Client                @relation(fields: [clientId], references: [id], onDelete: Cascade)
  invoice               Invoice?              @relation(fields: [invoiceId], references: [id], onDelete: SetNull)
  booking               Booking?              @relation(fields: [bookingId], references: [id], onDelete: SetNull)
  
  @@index([studioId, status])
  @@index([clientId])
  @@index([paymentNumber])
  @@map("payments")
}

model Expense {
  id                    String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  studioId              String                @db.Uuid
  userId                String                @db.Uuid
  
  // Expense Details
  category              String
  description           String
  amount                Decimal               @db.Decimal(10,2)
  currency              Currency              @default(USD)
  
  // Dates
  expenseDate           DateTime
  
  // Receipt
  receiptUrl            String?
  
  // Approval
  isApproved            Boolean               @default(false)
  approvedBy            String?
  approvedAt            DateTime?
  
  // Reimbursement
  isReimbursable        Boolean               @default(false)
  isReimbursed          Boolean               @default(false)
  reimbursedAt          DateTime?
  
  // Metadata
  vendor                String?
  projectReference      String?
  notes                 String?
  tags                  String[]              @default([])
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  
  // Relations
  studio                Studio                @relation(fields: [studioId], references: [id], onDelete: Cascade)
  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([studioId, category])
  @@index([userId])
  @@map("expenses")
}

model EmailTemplate {
  id                    String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  studioId              String                @db.Uuid
  
  // Template Info
  name                  String
  subject               String
  type                  String
  
  // Content
  htmlContent           String
  textContent           String?
  
  // Template Variables
  variables             Json?
  
  // Usage
  isActive              Boolean               @default(true)
  isSystem              Boolean               @default(false)
  
  // Metadata
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  
  // Relations
  studio                Studio                @relation(fields: [studioId], references: [id], onDelete: Cascade)
  
  @@index([studioId, type])
  @@map("email_templates")
}

model EmailCampaign {
  id                    String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  studioId              String                @db.Uuid
  
  // Campaign Details
  name                  String
  subject               String
  status                String                @default("draft")
  
  // Content
  htmlContent           String
  textContent           String?
  
  // Targeting
  targetAudience        Json?
  
  // Scheduling
  scheduledAt           DateTime?
  sentAt                DateTime?
  
  // Statistics
  totalRecipients       Int                   @default(0)
  sentCount             Int                   @default(0)
  deliveredCount        Int                   @default(0)
  openedCount           Int                   @default(0)
  clickedCount          Int                   @default(0)
  bouncedCount          Int                   @default(0)
  unsubscribedCount     Int                   @default(0)
  
  // Metadata
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  
  // Relations
  studio                Studio                @relation(fields: [studioId], references: [id], onDelete: Cascade)
  recipients            CampaignRecipient[]
  
  @@index([studioId, status])
  @@map("email_campaigns")
}

model CampaignRecipient {
  id                    String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  campaignId            String                @db.Uuid
  email                 String
  
  // Status
  status                String                @default("pending")
  
  // Tracking
  sentAt                DateTime?
  deliveredAt           DateTime?
  openedAt              DateTime?
  clickedAt             DateTime?
  bouncedAt             DateTime?
  unsubscribedAt        DateTime?
  
  // Metadata
  metadata              Json?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  
  // Relations
  campaign              EmailCampaign         @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  @@index([campaignId])
  @@index([email])
  @@map("campaign_recipients")
}

model Notification {
  id                    String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  studioId              String                @db.Uuid
  userId                String                @db.Uuid
  
  // Notification Details
  type                  String
  title                 String
  message               String
  
  // Status
  isRead                Boolean               @default(false)
  readAt                DateTime?
  
  // Actions
  actionUrl             String?
  actionText            String?
  
  // Metadata
  metadata              Json?
  createdAt             DateTime              @default(now())
  
  // Relations
  studio                Studio                @relation(fields: [studioId], references: [id], onDelete: Cascade)
  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([studioId, userId])
  @@index([isRead])
  @@map("notifications")
}

model File {
  id                    String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  studioId              String                @db.Uuid
  projectId             String?               @db.Uuid
  
  // File Details
  filename              String
  originalName          String
  mimeType              String
  size                  Int
  
  // Storage (Supabase Storage)
  supabasePath          String?               // Path in Supabase Storage
  url                   String
  thumbnailUrl          String?
  
  // File Type
  type                  String
  category              String?
  
  // Metadata
  metadata              Json?
  tags                  String[]              @default([])
  
  // Access Control
  isPublic              Boolean               @default(false)
  
  // Processing Status
  isProcessed           Boolean               @default(false)
  processedAt           DateTime?
  
  // Client Access
  clientVisible         Boolean               @default(false)
  downloadCount         Int                   @default(0)
  
  // Metadata
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  deletedAt             DateTime?
  
  // Relations
  studio                Studio                @relation(fields: [studioId], references: [id], onDelete: Cascade)
  project               Project?              @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  @@index([studioId, type])
  @@index([projectId])
  @@map("files")
}

model CurrencyExchangeRate {
  id                    String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  studioId              String                @db.Uuid
  
  // Currency Pair
  fromCurrency          Currency
  toCurrency            Currency
  
  // Rate
  rate                  Decimal               @db.Decimal(10,6)
  validFrom             DateTime
  validTo               DateTime?
  
  // Source
  source                String                @default("manual")
  
  // Metadata
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  
  // Relations
  studio                Studio                @relation(fields: [studioId], references: [id], onDelete: Cascade)
  
  @@unique([studioId, fromCurrency, toCurrency, validFrom])
  @@index([studioId])
  @@map("currency_exchange_rates")
}

model SystemSetting {
  id                    String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  studioId              String                @db.Uuid
  
  // Setting
  key                   String
  value                 Json
  category              String
  
  // Metadata
  description           String?
  isPublic              Boolean               @default(false)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  
  // Relations
  studio                Studio                @relation(fields: [studioId], references: [id], onDelete: Cascade)
  
  @@unique([studioId, key])
  @@index([studioId, category])
  @@map("system_settings")
}

model AuditLog {
  id                    String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  studioId              String                @db.Uuid
  userId                String                @db.Uuid
  
  // Action Details
  action                String
  entity                String
  entityId              String?
  
  // Changes
  oldValues             Json?
  newValues             Json?
  
  // Request Info
  ipAddress             String?
  userAgent             String?
  
  // Metadata
  metadata              Json?
  createdAt             DateTime              @default(now())
  
  // Relations
  studio                Studio                @relation(fields: [studioId], references: [id], onDelete: Cascade)
  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([studioId, entity])
  @@index([userId])
  @@index([createdAt])
  @@map("audit_logs")
}